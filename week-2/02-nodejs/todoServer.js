/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
// const fs = require("fs");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

// function readTodos() {
//   return fs.readFileSync("./files/todo.json", "utf-8", (err, data) => {
//     if (err) console.error(err);
//     return data;
//   });
// }

// function saveTodos() {
//   return fs.writeFileSync("Todolist.txt", "--- content ---", (err) => {
//     if (err) console.error(err);
//   });
// }

// const todos = [
//   { title: "sold groceries", completed: false, description: "I should buy groceries", id: 123 },
//   { title: "Buy", completed: false, description: "I", id: 12 },
// ];

const todos = [];

function findObj(id) {
  // console.log(todos.length);
  for (let i = 0; i < todos.length; i++) {
    // console.log(todos[i].id === id);
    if (todos[i].id === id) return i;
  }
  // const ans = todos.find((t, index) => t.id === Number(id));
  // console.log(ans);
  return -1;
}

app.get("/todos", (req, res) => {
  console.log(req.params);
  try {
    let data = todos;
    if (req.params.id) {
      data = findObj(Number(req.params.id));
      // console.log(data);
      if (data == -1) {
        throw new Error("data not found");
      } else {
        data = todos[data];
      }
    }

    res.status(200).send(data);
  } catch (err) {
    res.status(404).send({
      Error: err,
      message: err.message,
    });
  }
});

// app.get("/todos/:id", (req, res) => {
//   console.log(req.params.id);
//   try {
//     // const data = readTodos();
//     console.log("with id");
//     // res.status(200).send(JSON.parse(data));
//   } catch (err) {
//     res.status(404).send({
//       Error: err,
//     });
//   }
// });

app.post("/todos", (req, res) => {
  try {
    if (Object.keys(req.body).length === 0) {
      throw new Error("got empty json data");
    }
    const newObj = req.body;
    newObj.id = Math.floor(Math.random() * 1000000);
    todos.push(newObj);

    res.status(201).send({
      status: "ok",
      message: "data added successfully",
    });
  } catch (err) {
    res.status(404).send(err.message);
  }
});

app.put("/todos", (req, res) => {
  // let data = todos;

  try {
    if (Object.keys(req.body).length === 0) {
      throw new Error("got empty json data");
    }

    // if (req.params) {
    let data = findObj(Number(req.params.id));

    if (data == -1) {
      throw new Error("data not found");
    } else {
      todos[data].title = req.body.title;
      // todos[data].completed = req.body.completed;
      todos[data].description = req.body.description;

      res.status(200).send({
        status: "ok",
        message: "successfully updated",
      });
    }
    // }
  } catch (err) {
    res.status(404).send({
      Error: err,
      message: err.message,
    });
  }
});

app.delete("/todos", (req, res) => {
  try {
    console.log(req.params);
    // if (req.query) {
    let data = findObj(Number(req.params.id));
    if (data === -1) {
      throw new Error("data not found");
    } else {
      // console.log("data => ", data);
      todos.splice(data, 1);
      res.status(200).send();
    }
    // }

    // console.log(todos);
  } catch (err) {
    res.status(404).send({
      Error: err,
      // message: err.message,
    });
  }
});

app.all("*", (req, res) => {
  res.status(404).send("Route not found");
});

app.listen(4000, function () {
  console.log(`Server running at ${4000}`);
});
module.exports = app;
